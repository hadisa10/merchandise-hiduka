# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Cache Next.js build cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
            node_modules
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock', '**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock', '**/package-lock.json') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Archive production artifacts
        run: tar -czf nextjs-build.tar.gz .next public package.json package-lock.json ecosystem.config.js
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: nextjs-build
          path: nextjs-build.tar.gz

  # Deployment job

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: digital-ocean  # Specify the environment name here
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: nextjs-build
          path: deploy

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}

      - name: Deploy to Digital Ocean using Rsync
        run: |
          rsync -avz --progress --partial --delete -e "ssh -o StrictHostKeyChecking=no" deploy/nextjs-build.tar.gz ${{ secrets.DIGITALOCEAN_USERNAME }}@${{ secrets.DIGITALOCEAN_HOST }}:/home/brilliant/hokela-360
          ssh -o StrictHostKeyChecking=no ${{ secrets.DIGITALOCEAN_USERNAME }}@${{ secrets.DIGITALOCEAN_HOST }} "\
            export PATH=/home/brilliant/.nvm/versions/node/v20.12.2/bin:\$PATH; \
            cd /home/brilliant/hokela-360 && \
            if [ -d node_modules ]; then \
              echo 'Backing up node_modules...' && \
              mv node_modules ../node_modules_backup; \
            fi && \
            echo 'Extracting new build...' && \
            tar -xzf nextjs-build.tar.gz && \
            if [ -f package-lock.json ]; then \
              echo 'Checking dependency changes...' && \
              if ! md5sum -c --status ../prev_package_lock.md5; then \
                echo 'Dependencies have changed. Installing...' && \
                npm install --omit=dev; \
              else \
                echo 'Restoring node_modules...' && \
                mv ../node_modules_backup node_modules; \
              fi; \
            else \
              echo 'No package-lock.json found. Installing dependencies...' && \
              npm install --omit=dev; \
            fi && \
            md5sum package-lock.json > ../prev_package_lock.md5 && \
            pm2 start ecosystem.config.js || pm2 restart all""